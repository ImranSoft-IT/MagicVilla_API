

Patch Method: Need 2 packages for supported Patch Method.
There are 1. Microsoft.AspNetCore.JsonPatch [Version: 7.0.5]
		  2. Microsoft.AspNetCore.Mvc.NewtonsoftJson [Version: 7.0.5]
And must use [ApiController] Attribute over the Api Controller for Patch Method. Otherwise is not working.


Program.cs file

1. builder.Services.AddControllers();  // Add services to the container.
Note: Normal Controller define.

2. builder.Services.AddControllers().AddNewtonsoftJson();
Note: Patch Action Method call for NewtonsoftJson Configuration.

3. builder.Services.AddControllers(option => {option.ReturnHttpNotAcceptable = true;}).AddNewtonsoftJson();
Note: always Api return json data. You not allow other data like as XML, HTML, Text etc. So You can Apply ReturnHttpNotAcceptable = true. Then always return Json data.

4. builder.Services.AddControllers(option => {option.ReturnHttpNotAcceptable = true;}).AddNewtonsoftJson().AddXmlDataContractSerializerFormatters();
Note: And You can Allow json and Xml data then you add "AddXmlDataContractSerializerFormatters()"


5. For Database Migrate install the package : Microsoft.EntityFrameworkCore.Tools [Version: 7.0.5]

6. For Sql server Intregrate install the package : Microsoft.EntityFrameworkCore.SqlServer [Version: 7.0.5]

7. Database migration Command: add-migration addVillaTable

8. Database update command: update-database

9. Patch model : [
                  {

                    "path": "/details",
                    "op": "replace",
                    "value": "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim."
                  }
                ]

10. When we use AutoMapper then we need to install 2 package.
    There are: 1. AutoMapper [Version: 12.0.1]
               3. AutoMapper.Extensions.Microsoft.Dependen [Version: 12.0.1]


11. AutoMapper package installed after We need to create a "MappingConfig.cs" file for auto map. And this file register in "Program.cs" file.
    Example: builder.Services.AddAutoMapper(typeof(MappingConfig));

12. AutoMapper Most common Condition : We ensure two model Field names are the same.


13. Two Project run at a time: i. select the project solution
                              ii. right click the mouse and select "Configure Startup Projects"
                             iii. Select "Multiple startup Projects" -> Action change None to Start
                              iv. then click Apply and click Ok.

14. How to add Project Reference? MagicVilla_Web project have to do refer MagicVilla_Utility project.
    step  i. right click the MagicVilla_Web project
         ii. then click Add -> Project Reference
        iii. then select "MagicVilla_Utility" and then click OK.

15. We can modify localhost and port in 'launchSettings.json' file.

16. When we call api in the project.
    Step:  i. appsettings.json file open and add BaseUrl.
          ii. then configure [string villaUrl = configuration.GetValue<string>("ServiceUrls:VillaAPI");] in the service class dependency injection "VillaService.cs"
         iii. And register [builder.Services.AddHttpClient<IVillaService, VillaService>();] in programs.cs file.

17. Sweetalert2 include in the project.
    Step:  i. url: https://sweetalert2.github.io/
          ii. copy cdn from url and create a partial view in Shared folder name is '_Notification.cshtml'. Then paste the CDN.
         iii. then setup alert as well as '_Notification.cshtml' view. 
          iv. Configuer the _layout.cshtml view include '<partial name="_Notification" />' in body tag. And CDN enter under the _layout.cshtml view page.
           v. And TempData["success"] or TempData["error"] message send from Controller action method.

19. JWT Token generate secret key and configuration process.
    i. "ApiSettings": {
            "Secret": "THIS IS USED TO SIGN AND VERIFY JWT TOKENS, REPLACE IT WITH YOUR OWN SECRET"
        }
        (Add 'appssettings.json' file)
    ii. and repository dependency injection and keep the secret key a private property.
        example: private string secretKey;
                 public UserRepository(ApplicationDbContext db, IConfiguration configuration)
                 {
                     _db = db;
                     secretKey = configuration.GetValue<string>("ApiSettings:Secret");
                 }

20. Authorization and Authetication configuration
    i. Use attribute "[Authorize]" before action method.
    ii. Configure "app.UseAuthentication();" before "app.UseAuthorization();" in Programs.cs file.
    iii. install package "Microsoft.AspNetCore.Authentication.JwtBearer".
    iv. Configuration settings in Programs.cs file:
        var key = builder.Configuration.GetValue<string>("ApiSettings:Secret");
        builder.Services.AddAuthentication(x =>
        {
            x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        }).AddJwtBearer(x =>
        {
            x.RequireHttpsMetadata = false;
            x.SaveToken = true;
            x.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(key)),
                ValidateIssuer = false,
                ValidateAudience = false
            };
        });

21. Configure Swagger Authrization in Programs.cs file:
    Old example:  builder.Services.AddSwaggerGen();
    i.  builder.Services.AddSwaggerGen(options =>
        {
            options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
            {
                Description =
                    "JWT Authorization header using the Bearer scheme. \r\n\r\n " +
                    "Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\n" +
                    "Example: \"Bearer 12345abcdef\"",
                Name = "Authorization",
                In = ParameterLocation.Header,
                Scheme = "Bearer"
            });
            options.AddSecurityRequirement(new OpenApiSecurityRequirement()
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer",                    
                        },
                        Scheme = "oauth2",
                        Name = "Bearer",
                        In = ParameterLocation.Header
                    },
                    new List<string>()
                }
            });
        });


22. Login and we have to add session in Programs.cs file.(web project)
    builder.Services.AddDistributedMemoryCache();
    builder.Services.AddSession(options =>
    {
        options.IdleTimeout = TimeSpan.FromMinutes(100);
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
    });

    And session in AuthController.cs Login action method: HttpContext.Session.SetString(SD.SessionToken, model.Token);
    And Session Logout and session set in Logout action method: await HttpContext.SignOutAsync();
                                                                HttpContext.Session.SetString(SD.SessionToken, "");

23. When we want httpContext access in any view page. then we need to inject Accessor.
     example: @inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpAcc
     then we access: httpAcc.HttpContext.Session.GetString(SD.SessionToken);
     (life example in Web Project _Layout.cshtml page.)

24. When we login then we generate a token and we do HttpContext.SignIn exeample: var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);
                                                                                    identity.AddClaim(new Claim(ClaimTypes.Name, model.User.UserName));
                                                                                    identity.AddClaim(new Claim(ClaimTypes.Role, model.User.Role));
                                                                                    var principal = new ClaimsPrincipal(identity);
                                                                                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
    AND
    Then We set session, example: HttpContext.Session.SetString(SD.SessionToken, model.Token);
    AND
    We use [Authorize(Roles ="admin")] attribute Web controller and API Controller.

    Then we Access Role wise permission every action method. Thank you.

25. API Versioning:
    We need two package install for Version controlling.
    Right click the MagicVilla_VillaApI project and select NuGet Package. and install two packages.
        i. Microsoft.AspNetCore.Mvc.Versioning [Version: 5.1.0]
        ii. Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer [Version: 5.1.0]

    
    Second Step: We need to register ApiVersioning in Programs.cs file.
                Ex:- builder.Services.AddApiVersioning(); /*** When we use this then all api mendetory for versioning configuration. ***/
                So we can bypass this. 
                Ex: builder.Services.AddApiVersioning(options =>{
                        options.AssumeDefaultVersionWhenUnspecified = true;
                        options.DefaultApiVersion = new ApiVersion(1, 0);  /**1 is major version and 0 is minor version**/
                    });

    Thired Step: Then Use [ApiVersion("1.0")] attribute top of the VillaNumberController class.
                 NOTE: But Remember major version and minor version are same as register versioning in programs.cs file. Like as (1,0) and (1.0)

    Fourth Step: Multiple Version in same Controller
                i. Add to attribute top of the controller class. 1. [ApiVersion("1.0")]
                                                                 2. [ApiVersion("2.0")]

                ii. And Route modify for the versioning --- [Route("api/v{version:apiVersion}/VillaNumberAPI")]
                iii. Action mehtod use [MapToApiVersion("1.0")] and [MapToApiVersion("2.0")] attribute example: 
                                                        [HttpGet]
                                                        [MapToApiVersion("1.0")]
                                                        [ProducesResponseType(StatusCodes.Status200OK)]
                                                        public async Task<ActionResult<APIResponse>> GetVillaNumbers()
                                                        {
                                                            try
                                                            {
                                                                _logger.LogInformation("Getting all villas");

                                                                List<VillaNumber> villas = await _villaNumberRepository.GetAllAsync(includeProperties:"Villa");

                                                                _response.Result = _mapper.Map<List<VillaNumberDTO>>(villas);
                                                                _response.StatusCode = HttpStatusCode.OK;

                                                                return Ok(_response);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                _response.IsSuccess = false;
                                                                _response.ErrorMessages = new List<string>()
                                                                {
                                                                    ex.ToString()
                                                                };

                                                                return _response;
                                                            }

                                                        }

                                                        [HttpGet]
                                                        [MapToApiVersion("2.0")]
                                                        public IEnumerable<string> Get()
                                                        {
                                                            return new string[] { "Value1", "Value2" };
                                                        }
                iv. register in programs.cs file: 
                        builder.Services.AddVersionedApiExplorer(options =>
                        {
                            options.GroupNameFormat = "'v'VVV";
                        });

                v. We want to see which version api run or "api-supported-versions: 1.0" then add "options.ReportApiVersions = true;" in AddApiVersioning services in Programs.cs file.
                vi. If we want api-supported-version default run then we need to configure "options.SubstituteApiVersionInUrl = true;" in builder.Services.AddVersionedApiExplorer services in Program.cs file.


26. Swagger document Version control register under "builder.Services.AddSwaggerGen" method in Program.cs file.
        i. options.SwaggerDoc("v1", new OpenApiInfo
            {
                Version = "v1.0",
                Title= "Magic Villa",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url= new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });

        ii. And configure under "app.UseSwaggerUI" method in program.cs file
            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "Magic_VillaV1");
            });

    OR
    Configuration Multiple version then we add........
        i. options.SwaggerDoc("v1", new OpenApiInfo
            {
                Version = "v1.0",
                Title= "Magic Villa V1",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url= new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });
            options.SwaggerDoc("v2", new OpenApiInfo
            {
                Version = "v2.0",
                Title = "Magic Villa V2",
                Description = "API to manage Villa",
                TermsOfService = new Uri("https://example.com/terms"),
                Contact = new OpenApiContact
                {
                    Name = "Dotnetmastery",
                    Url = new Uri("https://dotnetmastery.com")
                },
                License = new OpenApiLicense
                {
                    Name = "Example License",
                    Url = new Uri("https://example.com/license")
                }
            });

        ii. app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "Magic_VillaV1");
                options.SwaggerEndpoint("/swagger/v2/swagger.json", "Magic_VillaV2");
            });


27. Api Version Neutral: 
    When we want one controller access multiple version then use [ApiVersionNeutral] instead of [ApiVersion("1.0")].
    (you can follow UsersController.cs).


28. Api Version Depreciating:
    I add "[ApiVersion("1.0", Deprecated = true)]" top of the v1 VillaNumberAPIController.cs 
    and response headers: api-deprecated-versions: 1.0 
                          api-supported-versions: 2.0 

29. Add Api Response Caching: 
        i. register "builder.Services.AddResponseCaching();" in program.cs file.
        ii. add "[ResponseCache(Duration = 30)]" attribute in action method. (see VillaApiController.cs)


30. Caching Profile:
        i. add controller services in program.cs file: option.CacheProfiles.Add("Default30", new CacheProfile()
                                                        {
                                                            Duration = 30
                                                        });
        ii. add "[ResponseCache(CacheProfileName = "Default30")]" attribute in action method. (see VillaApiController.cs)


31. DOT NET Identity configure:
        i. Install nuget package "Microsoft.AspNetCore.Identity.EntityFrameworkCore" version:[7.0.8]
        ii. Create a model class (ApplicationUser) and inherite 'IdentityUser' class
        iii. service configure => builder.Services.AddIdentity<ApplicationUser, IdentityRole>().AddEntityFrameworkStores<ApplicationDbContext>(); in Program.cs file.
        iv. Change ApplicationDbContext class inherite 'IdentityDbContext<ApplicationUser>' transition 'DbContext'
            And add dbset. "public DbSet<ApplicationUser> ApplicationUsers { get; set; }"
        v. Add "base.OnModelCreating(modelBuilder);" inside OnModelCreating Method in ApplicationDbContext class.
        vi. Migration command "add-migration AddIdentityUserTable" and then command "update-database".


32. Dot Net Identity Apply applicaiton:
        i. add Private property and dependency injection in UserRepository class.
            example: private readonly UserManager<ApplicationUser> _userManager;
                     public UserRepository(ApplicationDbContext db, IConfiguration configuration, UserManager<ApplicationUser> userManager)
                     {
                        _db = db;
                        secretKey = configuration.GetValue<string>("ApiSettings:Secret"); /*** For JWT Token Security key ***/
                        _userManager = userManager;
                     }

        ii. Modify IsUniqueUser method => add ApplicationUsers entity transition LocalUsers entity.
        iii. Create 'UserDTO' class LocalUser er poriborte. And LoginResponseDTO.cs modify.
        iv. AutoMapper Configure "CreateMap<ApplicationUser, UserDTO>().ReverseMap();"
        v. Modify "Login" method.


