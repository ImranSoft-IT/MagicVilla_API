

Patch Method: Need 2 packages for supported Patch Method.
There are 1. Microsoft.AspNetCore.JsonPatch [Version: 7.0.5]
		  2. Microsoft.AspNetCore.Mvc.NewtonsoftJson [Version: 7.0.5]
And must use [ApiController] Attribute over the Api Controller for Patch Method. Otherwise is not working.


Program.cs file

1. builder.Services.AddControllers();  // Add services to the container.
Note: Normal Controller define.

2. builder.Services.AddControllers().AddNewtonsoftJson();
Note: Patch Action Method call for NewtonsoftJson Configuration.

3. builder.Services.AddControllers(option => {option.ReturnHttpNotAcceptable = true;}).AddNewtonsoftJson();
Note: always Api return json data. You not allow other data like as XML, HTML, Text etc. So You can Apply ReturnHttpNotAcceptable = true. Then always return Json data.

4. builder.Services.AddControllers(option => {option.ReturnHttpNotAcceptable = true;}).AddNewtonsoftJson().AddXmlDataContractSerializerFormatters();
Note: And You can Allow json and Xml data then you add "AddXmlDataContractSerializerFormatters()"


5. For Database Migrate install the package : Microsoft.EntityFrameworkCore.Tools [Version: 7.0.5]

6. For Sql server Intregrate install the package : Microsoft.EntityFrameworkCore.SqlServer [Version: 7.0.5]

7. Database migration Command: add-migration addVillaTable

8. Database update command: update-database

9. Patch model : [
                  {

                    "path": "/details",
                    "op": "replace",
                    "value": "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim."
                  }
                ]

10. When we use AutoMapper then we need to install 2 package.
    There are: 1. AutoMapper [Version: 12.0.1]
               3. AutoMapper.Extensions.Microsoft.Dependen [Version: 12.0.1]


11. AutoMapper package installed after We need to create a "MappingConfig.cs" file for auto map. And this file register in "Program.cs" file.
    Example: builder.Services.AddAutoMapper(typeof(MappingConfig));

12. AutoMapper Most common Condition : We ensure two model Field names are the same.


13. Two Project run at a time: i. select the project solution
                              ii. right click the mouse and select "Configure Startup Projects"
                             iii. Select "Multiple startup Projects" -> Action change None to Start
                              iv. then click Apply and click Ok.

14. How to add Project Reference? MagicVilla_Web project have to do refer MagicVilla_Utility project.
    step  i. right click the MagicVilla_Web project
         ii. then click Add -> Project Reference
        iii. then select "MagicVilla_Utility" and then click OK.

15. We can modify localhost and port in 'launchSettings.json' file.

16. When we call api in the project.
    Step:  i. appsettings.json file open and add BaseUrl.
          ii. then configure [string villaUrl = configuration.GetValue<string>("ServiceUrls:VillaAPI");] in the service class dependency injection "VillaService.cs"
         iii. And register [builder.Services.AddHttpClient<IVillaService, VillaService>();] in programs.cs file.

17. Sweetalert2 include in the project.
    Step:  i. url: https://sweetalert2.github.io/
          ii. copy cdn from url and create a partial view in Shared folder name is '_Notification.cshtml'. Then paste the CDN.
         iii. then setup alert as well as '_Notification.cshtml' view. 
          iv. Configuer the _layout.cshtml view include '<partial name="_Notification" />' in body tag. And CDN enter under the _layout.cshtml view page.
           v. And TempData["success"] or TempData["error"] message send from Controller action method.

19. 


